---
##### GUI #####
- name: Install Desktop Environment
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  block:
    - name: Install the 'Development tools' package group
      ansible.builtin.yum:
        name: "@Development tools"
        state: present
    - name: Install the 'Gnome desktop' environment group
      ansible.builtin.yum:
        name: "@Server with GUI"
        state: present
    - name: Default to graphics
      become: yes
      when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
      command: systemctl set-default graphical

##### O/S packages, environment, NOS3 branding, etc. #####
- name: Include OS specific variables
  when: ansible_facts['os_family'] == "Debian"
  include_vars:
    file: "Debian.yml"
    name: osvars
  tags: base
- name: Include OS specific variables
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  include_vars:
    file: "RedHat.yml"
    name: osvars
  tags: base

##### O/S packages #####
- name: Enable i386 architecture
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  command: dpkg --add-architecture i386
- name: Update apt package cache
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  apt: update_cache=yes
  tags: base
- name: Add epel-release repository for yum
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum:
    name: "epel-release"
    state: present
  tags: base
- name: Add powertools repository for yum
  become: yes
  ignore_errors: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  command: yum config-manager --set-enabled powertools  
  args:
    warn: false
- name: Add ol8_codeready_builder repository for yum
  become: yes
  when: (OS == "oracle")
  command: yum config-manager --set-enabled ol8_codeready_builder  
  args:
    warn: false
- name: Update yum package cache
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum: update_cache=yes
  tags: base
- name: Install NOS3 required packages
  become: yes
  package:
    state: latest
    name: "{{ osvars.packages_to_install }}"
  tags: base

# Red Hat can-utils / socketcand / libsocketcan
- name: Clean can-utils artifact path
  become: yes
  file:
    state: absent
    path: /tmp/can-utils
- name: Can-utils repo
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  block:
    - name: Clone can-utils repo
      command: git clone https://github.com/linux-can/can-utils.git -b v2018.02.0
      args:
        chdir: /tmp/
  #git:
  #  dest: /tmp/can-utils
  #  repo: https://github.com/linux-can/can-utils.git
  #  version: v2018.02.0
  #  accept_hostkey: yes
  #  update: no
- name: Autogen can-utils
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  script: 
    cmd: /tmp/can-utils/autogen.sh
    chdir: /tmp/can-utils
- name: Build can-utils
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/can-utils
- name: Install can-utils
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/can-utils
    target: install
    
- name: Clean socketcand artifact path
  become: yes
  file:
    state: absent
    path: /tmp/socketcand
- name: Socketcand repo
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  block:
    - name: Clone socketcand repo
      command: git clone https://github.com/linux-can/socketcand.git -b 0.6.1
      args:
        chdir: /tmp/
  #git:
  #  dest: /tmp/socketcand
  #  repo: https://github.com/linux-can/socketcand.git
  #  version: 0.6.1
  #  accept_hostkey: yes
  #  update: no
- name: Autoconf socketcand
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  shell: 
    cmd: autoconf
    chdir: /tmp/socketcand
- name: Configure socketcand
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  shell: 
    cmd: "/tmp/socketcand/configure --without-config"
    chdir: /tmp/socketcand
- name: Build socketcand
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/socketcand
- name: Install socketcand
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/socketcand
    target: install

- name: Clean libsocketcan artifact path
  become: yes
  file:
    state: absent
    path: /tmp/libsocketcan
- name: Libsocketcan repo
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  block:
    - name: Clone socketcand repo
      command: git clone https://github.com/lalten/libsocketcan.git
      args:
        chdir: /tmp/
    - name: Checkout specific branch
      command: git checkout 077def398ad303043d73339112968e5112d8d7c8
      args:
        chdir: /tmp/libsocketcan
  #git:
  #  dest: /tmp/libsocketcan
  #  repo: https://github.com/lalten/libsocketcan.git
  #  version: 077def398ad303043d73339112968e5112d8d7c8
  #  accept_hostkey: yes
  #  update: no
- name: Autogen libsocketcan
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  script: 
    cmd: /tmp/libsocketcan/autogen.sh
    chdir: /tmp/libsocketcan
- name: Configure libsocketcan
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  shell: 
    cmd: "/tmp/libsocketcan/configure"
    chdir: /tmp/libsocketcan
- name: Build libsocketcan
  become: yes
  ignore_errors: yes
  no_log: True
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/libsocketcan
- name: Install libsocketcan
  become: yes
  ignore_errors: yes
  no_log: True
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  make:
    chdir: /tmp/libsocketcan
    target: install

# Ubuntu Xerces-C required for NOS Engine
- name: Clean xerces-c path
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  file:
    state: absent
    path: /tmp/xerces-c-3.2.0
- name: Download xerces-c
  when: ansible_facts['os_family'] == "Debian"
  get_url:
    url: https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/xerces-c/3.2.0+debian-2/xerces-c_3.2.0+debian.orig.tar.gz
    dest: /tmp/xerces-c-3.2.0.tar.gz
    validate_certs: no
- name: Extract xerces-c
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  unarchive:
    src: /tmp/xerces-c-3.2.0.tar.gz
    dest: /tmp/
- name: Configure xerces-c
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  shell: 
    cmd: "/tmp/xerces-c-3.2.0/configure CFLAGS=-m32 CXXFLAGS=-m32"
    chdir: /tmp/xerces-c-3.2.0
- name: Build xerces-c
  become: yes
  ignore_errors: yes
  no_log: True
  when: ansible_facts['os_family'] == "Debian"
  make:
    chdir: /tmp/xerces-c-3.2.0
- name: Install xerces-c
  become: yes
  ignore_errors: yes
  no_log: True
  when: ansible_facts['os_family'] == "Debian"
  make:
    chdir: /tmp/xerces-c-3.2.0
    target: install

# Debian VSCode
- name: Install VS code on Debian
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  snap:
    name: code
    classic: yes

# RHEL VSCode
- name: Setup VS Code Repository on RHEL-Based Systems
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum_repository:
      name: vscode
      description: Microsoft Visual Studio Code
      baseurl: https://packages.microsoft.com/yumrepos/vscode
      enabled: yes
      gpgkey: https://packages.microsoft.com/keys/microsoft.asc
      gpgcheck: yes

- name: Install VS Code on RHEL-Based Systems
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum:
      name: code

##### Install ITC common and NOS engine #####
- name: Install ITC common on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  apt:
    deb="/vagrant/nos3_filestore/packages/ubuntu/itc-common-Release_1.10.1_i386.deb"
  tags: base
- name: Install NOS engine on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  apt:
    deb="/vagrant/nos3_filestore/packages/ubuntu/nos-engine-Release_1.6.1_i386.deb"
  tags: base
  
- name: Install ITC common and NOS engine on RHEL
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum:
    name:
      - "/vagrant/nos3_filestore/packages/rhel/xerces-c-3.1.1-10.el7_7.i686.rpm"
      - "/vagrant/nos3_filestore/packages/rhel/xerces-c-devel-3.1.1-10.el7_7.i686.rpm"
      - "/vagrant/nos3_filestore/packages/rhel/itc-common-Release_1.10.1_i386.rpm"
      - "/vagrant/nos3_filestore/packages/rhel/nos-engine-Release_1.6.1_i386.rpm"
    disable_gpg_check: true
    state: present
  tags: base

##### Perform NOS3 branding #####
- name: Install/use NOS3 background on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  blockinfile:
    path: /etc/profile.d/all_users.sh
    create: yes
    mode: '0666'
    marker: "# {mark} Ansible managed NOS3 background block"
    block: |
      gsettings set org.gnome.desktop.background picture-uri "/usr/share/backgrounds/nos3_background.png"
  tags: base
- name: Copy NOS3 background
  become: yes
  copy:
    src: /vagrant/nos3_filestore/backgrounds/nos3_background.png
    dest: /usr/share/backgrounds/
    mode: '0666'
  tags: base

- name: Install NOS3 background on RHEL
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  blockinfile:
    path: /etc/dconf/db/local.d/02-gnome-desktop-background
    create: yes
    marker: "# {mark} Ansible managed NOS3 backgrounds block"
    block: |
      # dconf path
      [org/gnome/desktop/background]
      # dconf key names / values
      picture-uri='file:///usr/share/backgrounds/nos3_background.png'
  tags: base
- name: Use NOS3 background on RHEL
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  command:  dconf update
  tags: base

- name: Versioning
  tags:
    - base
    - version
  block:
  - name: Include versioning variables
    include_vars: Version.yml
  - name: Add version and timestamp info config file to record basebox versioning
    become: yes
    blockinfile:
      path: /etc/nos3-deployment-release
      create: yes
      block: |
        vm_provisioning_date="{{ date }}"
        deployment_repo_sha1="{{ git_sha1 }}"
        deployment_repo_date="{{ git_date }}"
        deployment_repo_refs="{{ git_refs }}"
        deployment_repo_tags="{{ git_tags }}"
        deployment_repo_modified_files="{{ git_mods }}"

##### Configure environment, crash reporting, and core dumps #####
- name: Up the message queue maximum
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: fs.mqueue.msg_max
    line: 'fs.mqueue.msg_max=500'
  tags: base
- name: Up the max user watches for VS code
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: fs.inotify.max_user_watches
    line: 'fs.inotify.max_user_watches=524288'
  tags: base
- name: Update system config now
  become: yes
  ignore_errors: yes
  command:  sysctl -p
  tags: base
- name: Remove apport on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  package:
    state: absent
    name: apport
  tags: base
- name: Set core dump pattern on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: core_pattern
    line: 'kernel.core_pattern=core.%e.%p.%t'
  tags: base
- name: Set soft core dump limits on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'soft.*core'
    line: '*                soft    core            unlimited'
  tags: base
- name: Set hard core dump limits on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'hard.*core'
    line: '*                hard    core            unlimited'
  tags: base
- name: Set ptrace abilities on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/sysctl.d/10-ptrace.conf
    create: yes
    regexp: 'kernel.yama.ptrace_scope'
    line: 'kernel.yama.ptrace_scope = 0'
  tags: base
- name: Set soft real time priority limits
  become: yes
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'soft.*rtprio'
    line: '*                soft    rtprio            99'
  tags: base
- name: Set hard real time priority limits
  become: yes
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'hard.*rtprio'
    line: '*                hard    rtprio            99'
  tags: base
# No special crash reporting/debugging config on RHEL (yet)

# RHEL podman use crun
- name: Have podman use crun instread of runc
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  lineinfile:
    path: /usr/share/containers/containers.conf
    create: yes
    regexp: 'runtime = "runc"'
    line: 'runtime = "crun" # "runc"'
